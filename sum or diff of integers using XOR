Algorithm

Simplify problem down to two cases: sum or subtraction of two positive integers: x \pm yx±y, where x > yx>y. Save down the sign of the result.

If one has to compute the sum:

While carry is nonzero: y != 0:

Current answer without carry is XOR of x and y: answer = x^y.

Current carry is left-shifted AND of x and y: carry = (x & y) << 1.

Job is done, prepare the next loop: x = answer, y = carry.

Return x * sign.

If one has to compute the difference:

While borrow is nonzero: y != 0:

Current answer without borrow is XOR of x and y: answer = x^y.

Current borrow is left-shifted AND of NOT x and y: borrow = ((~x) & y) << 1.

Job is done, prepare the next loop: x = answer, y = borrow.

Return x * sign.


class Solution:
    def getSum(self, a: int, b: int) -> int:
        x, y = abs(a), abs(b)
        # ensure that abs(a) >= abs(b)
        if x < y:
            return self.getSum(b, a)
        
        # abs(a) >= abs(b) --> 
        # a determines the sign
        sign = 1 if a > 0 else -1
        
        if a * b >= 0:
            # sum of two positive integers x + y
            # where x > y
            while y:
                answer = x ^ y
                carry = (x & y) << 1
                x, y = answer, carry
        else:
            # difference of two integers x - y
            # where x > y
            while y:
                answer = x ^ y
                borrow = ((~x) & y) << 1
                x, y = answer, borrow
        
        return x * sign

Complexity Analysis
•	Time complexity: {O}(1) because each integer contains 32 bits.
•	Space complexity:  {O}(1) because we don't use any additional data structures.


