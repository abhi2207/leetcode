FB Sorted Iterator - next min element of 3 lists

You have three unsorted list of numbers. Design/Write function that will return next minimum element out of these lists (remove that element from list).

Time complexity:

Initialization: n1 log n1 + n2 log n2 + n3 log n3 + 3 log 3
has_next : O(1)
get_next: (n1 + n2 + n3 ) log 3 -> because height of the heap will be, at max, size 3. Since log 3 is constant, we can argue the time complexity as ~ O(n1 + n2 + n3)
Note:
I have modified the input array in this case. Generally, that might not be an acceptable solution, in which case, I would recommend keeping track of the index of the item that you are currently using in the list

import heapq
class GentNextMin:
    def __init__(self, l1, l2, l3):
        self.heap = []
        
        if l1:
            l1.sort(key=lambda x : -x)
            heapq.heappush(self.heap, (l1.pop(), l1))
        if l2:
            l2.sort(key=lambda x : -x)
            heapq.heappush(self.heap, (l2.pop(), l2))
        if l3:
            l3.sort(key=lambda x : -x)
            heapq.heappush(self.heap, (l3.pop(), l3))
    
    def has_next(self):
        if self.heap:
            return True
        return False
    
    def next(self):
        if not self.has_next():
            raise Exception()
        
        e, l = heapq.heappop(self.heap)
        if l:
            heapq.heappush(self.heap, (l.pop(), l))
        return e

i = GentNextMin([5,1,2,4], [4,6,3], [9,0,7])
while i.has_next():
    print(i.next())
