Add Two Numbers II
Prerequisites

The problem is a combination of three basic problems:

Reverse Linked List.

Add Strings - the good problem to refresh textbook digit-by-digit addition algorithm.

Add Two Numbers - the same problem as the current one, but the digits are stored in reverse order.

Time and Space Complexity To Target

Each list should be parsed at least once, hence the best time complexity we could have is \mathcal{O}(N_1 + N_2)O(N 
1
​	
 +N 
2
​	
 ), where N_1N 
1
​	
  and N_2N 
2
​	
  are the numbers of elements in the lists.

Space complexity is more interesting. It's relatively standard for linked list problems not to allocate any data structure but the output list. This way, one could target \mathcal{O}(1)O(1) space complexity without taking the output list into account.

How to Solve: Reverse Input vs. Reverse Output

The standard textbook addition algorithm begins by summing the least-significant digits. Each digit is in the range from 0 to 9, and the "overflows" are managed by moving the carry into the next range.

img Figure 1. Textbook Addition.

That is quite convenient for the problem Add Two Numbers, where the digits are stored in reverse order. In this problem, the digits are stored in direct order. There are two ways to proceed:

Approach 1. The idea is to adapt input by reversing the input lists. This way, one could parse reverse lists starting from the head and use the textbook addition algorithm.
img Figure 2. Approach 1: Reverse Input + Construct Output by Adding to Front.

Approach 2. The idea is to adapt the addition algorithm.
img Figure 3. Approach 2: Adapt Addition Algorithm + Reverse Output.



Approach 1: Reverse Input + Construct Output by Adding to Front
img Figure 4. Reverse Input + Construct Output by Adding to Front.

Algorithm

Implement reverseList function.

Reverse both input lists: l1 = reverseList(l1), l2 = reverseList(l2).

Initialize the result list: head = None.

Initialize the carry: carry = 0.

Loop through lists l1 and l2 until you reach both ends.

Set x1 = l1.val if l1 is not finished yet, and x1 = 0 otherwise.

Set x2 = l2.val if l2 is not finished yet, and x2 = 0 otherwise.

Compute the current value: val = (carry + x1 + x2) % 10, and the current carry: carry = (carry + x1 + x2) / 10.

Update the result by adding the current value to front.

Move to the next elements in the lists.

If the carry is not equal to zero, append it to frond of the result list.

Return the result list: return head.


class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        last = None
        while head:
            # keep the next node
            tmp = head.next
            # reverse the link
            head.next = last
            # update the last node and the current node
            last = head
            head = tmp
        
        return last
    
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        # reverse lists
        l1 = self.reverseList(l1)
        l2 = self.reverseList(l2)
        
        head = None
        carry = 0
        while l1 or l2:
            # get the current values 
            x1 = l1.val if l1 else 0
            x2 = l2.val if l2 else 0
            
            # current sum and carry
            val = (carry + x1 + x2) % 10
            carry = (carry + x1 + x2) // 10
            
            # update the result: add to front
            curr = ListNode(val)
            curr.next = head
            head = curr
            
            # move to the next elements in the lists
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None

        if carry:
            curr = ListNode(carry)
            curr.next = head
            head = curr

        return head