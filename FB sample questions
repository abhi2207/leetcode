cumulative sum of elements in a
list
# Python code to get the Cumulative sum of a list 
def Cumulative(lists): 
    cu_list = [] 
    length = len(lists) 
    cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)] 
    return cu_list[1:]
 
# Driver Code 
lists = [10, 20, 30, 40, 50] 
print (Cumulative(lists)) 


takes a number and returns a list of its
digits
# Python3 code to demonstrate 
# conversion of number to list of integers 
# using map() 

# initializing number 
num = 2019

# printing number 
print ("The original number is " + str(num)) 

# using map() 
# to convert number to list of integers 
res = list(map(int, str(num))) 

# printing result 
print ("The list from number is " + str(res)) 


2


"Return the "centered" average of a list of integers, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the list. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use integer division to produce the final average. You may assume that the list is length 3 or more."

This is a problem I have from my homework assignment and I am stumped at how to find the the largest/smallest numbers and cut them out of the list. Here is what I have so far. and It works for 10/14 the scenarios that I have to pass.. I think it is just because it grabs the median


    max_value = nums[0]
    min_value = nums[0]
    sum = 0
    for x in nums:
        max_value = max(max_value, x)
        min_value = min(min_value, x)
        sum += x

    return (sum - max_value - min_value) / (len(nums) - 2)